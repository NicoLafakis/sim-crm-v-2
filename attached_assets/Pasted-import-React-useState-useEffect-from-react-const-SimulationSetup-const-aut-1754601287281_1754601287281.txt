import React, { useState, useEffect } from 'react';

const SimulationSetup = () => {
  const [autoMode, setAutoMode] = useState(false);
  const [autoValue, setAutoValue] = useState(30);
  const [values, setValues] = useState([30, 30, 30, 30, 30]);
  const [customObjects, setCustomObjects] = useState(false);
  const [customFields, setCustomFields] = useState(false);
  const [specificOwnership, setSpecificOwnership] = useState(false);
  const [distributionWeights, setDistributionWeights] = useState(false);
  
  const labels = ['Contacts', 'Companies', 'Deals', 'Tickets', 'Notes'];
  const disabledLabels = ['Tasks', 'Calls'];
  const maxTotal = 150;
  const recordsDisplay = `${values.reduce((a, b) => a + b, 0)} / ${maxTotal}`;

  useEffect(() => {
    if (autoMode) {
      const newValues = Array(5).fill(autoValue);
      setValues(newValues);
    }
  }, [autoValue, autoMode]);

  const handleSliderChange = (index, newValue) => {
    if (autoMode) return;
    
    const val = parseInt(newValue);
    const newValues = [...values];
    const otherIndices = [0, 1, 2, 3, 4].filter(i => i !== index);
    const currentOthersSum = otherIndices.reduce((sum, i) => sum + newValues[i], 0);
    
    if (val + currentOthersSum <= maxTotal) {
      newValues[index] = val;
    } else {
      newValues[index] = maxTotal - currentOthersSum;
    }
    
    setValues(newValues);
  };

  const handleAutoChange = (newValue) => {
    const val = parseInt(newValue);
    const maxPerSlider = Math.floor(maxTotal / 5);
    const limitedValue = Math.min(val, maxPerSlider);
    setAutoValue(limitedValue);
  };

  return (
    <div className="simulation-container">
      <style>{`
        .simulation-container {
          background: #1a1f2e;
          border: 2px solid #0f1419;
          padding: 20px;
          width: 600px;
          font-family: 'Courier New', monospace;
          box-shadow: 0 10px 30px rgba(0,0,0,0.8);
          user-select: none;
        }

        .title {
          color: #4ade80;
          font-size: 32px;
          font-weight: bold;
          text-align: center;
          margin-bottom: 20px;
          text-shadow: 0 0 20px rgba(74, 222, 128, 0.5);
          letter-spacing: 2px;
        }

        .header-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 30px;
          color: #4ade80;
          font-size: 14px;
        }

        .player-info {
          font-weight: bold;
        }

        .records-info {
          font-weight: bold;
        }

        .controls-row {
          display: flex;
          align-items: center;
          gap: 15px;
          margin-bottom: 20px;
        }

        .on-indicator {
          background: #4ade80;
          color: #1a1f2e;
          padding: 4px 12px;
          font-size: 11px;
          font-weight: bold;
          border: 1px solid #22c55e;
          box-shadow: 0 0 10px rgba(74, 222, 128, 0.5);
        }

        .auto-button {
          background: ${autoMode ? '#4ade80' : '#2d3748'};
          border: 1px solid ${autoMode ? '#22c55e' : '#4a5568'};
          color: ${autoMode ? '#1a1f2e' : '#718096'};
          padding: 4px 12px;
          font-size: 11px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.2s;
          box-shadow: ${autoMode ? '0 0 10px rgba(74, 222, 128, 0.5)' : 'none'};
        }

        .auto-button:hover {
          background: ${autoMode ? '#22c55e' : '#4a5568'};
        }

        .sliders-grid {
          display: grid;
          grid-template-columns: repeat(8, 1fr);
          gap: 15px;
          margin-bottom: 30px;
          padding: 20px;
          background: #0f1419;
          border: 1px solid #2d3748;
        }

        .slider-column {
          display: flex;
          flex-direction: column;
          align-items: center;
          position: relative;
        }

        .slider-column.disabled {
          opacity: 0.3;
          pointer-events: none;
        }

        .slider-container {
          height: 180px;
          width: 40px;
          display: flex;
          align-items: center;
          justify-content: center;
          position: relative;
        }

        .slider-track {
          width: 8px;
          height: 160px;
          background: #2d3748;
          border: 1px solid #4a5568;
          position: relative;
        }

        .slider-track.active {
          background: linear-gradient(180deg, #4ade80 0%, #22c55e 100%);
          box-shadow: 0 0 10px rgba(74, 222, 128, 0.3);
        }

        .slider-track.disabled-track {
          background: #1a1f2e;
          border: 1px solid #2d3748;
        }

        .slider-thumb {
          position: absolute;
          width: 24px;
          height: 12px;
          background: #fbbf24;
          border: 1px solid #f59e0b;
          cursor: grab;
          left: 50%;
          transform: translateX(-50%);
        }

        .slider-thumb.disabled-thumb {
          background: #4a5568;
          border: 1px solid #2d3748;
          cursor: default;
        }

        .slider-input {
          position: absolute;
          width: 40px;
          height: 160px;
          opacity: 0;
          cursor: grab;
          transform: rotate(270deg);
        }

        .slider-value {
          color: #4ade80;
          font-size: 16px;
          font-weight: bold;
          margin-bottom: 10px;
          min-height: 20px;
          text-shadow: 0 0 5px rgba(74, 222, 128, 0.5);
        }

        .slider-label {
          color: #4ade80;
          font-size: 10px;
          text-align: center;
          margin-top: 10px;
          max-width: 60px;
        }

        .auto-toggle {
          margin-top: 10px;
        }

        .toggle-checkbox {
          display: none;
        }

        .toggle-label {
          display: block;
          width: 40px;
          height: 20px;
          background: #2d3748;
          border: 1px solid #4a5568;
          cursor: pointer;
          position: relative;
          transition: background 0.3s;
        }

        .toggle-checkbox:checked + .toggle-label {
          background: #4ade80;
          border-color: #22c55e;
          box-shadow: 0 0 10px rgba(74, 222, 128, 0.5);
        }

        .toggle-label::after {
          content: '';
          position: absolute;
          width: 16px;
          height: 16px;
          background: #718096;
          top: 1px;
          left: 1px;
          transition: all 0.3s;
        }

        .toggle-checkbox:checked + .toggle-label::after {
          background: #1a1f2e;
          left: 22px;
        }

        .auto-distribution {
          display: flex;
          align-items: center;
          gap: 10px;
          margin-bottom: 20px;
          padding: 10px;
          background: #0f1419;
          border: 1px solid #2d3748;
        }

        .checkbox-container {
          display: flex;
          align-items: center;
          gap: 5px;
        }

        .checkbox {
          width: 16px;
          height: 16px;
          background: ${autoMode ? '#4ade80' : '#2d3748'};
          border: 1px solid ${autoMode ? '#22c55e' : '#4a5568'};
          cursor: ${autoMode ? 'default' : 'pointer'};
          display: flex;
          align-items: center;
          justify-content: center;
          opacity: ${autoMode ? 0.5 : 1};
        }

        .checkbox.checked::after {
          content: '✓';
          color: #1a1f2e;
          font-weight: bold;
          font-size: 12px;
        }

        .checkbox-label {
          color: #4ade80;
          font-size: 14px;
          font-weight: bold;
        }

        .additional-options {
          margin-bottom: 20px;
        }

        .options-title {
          color: #4ade80;
          font-size: 16px;
          font-weight: bold;
          text-align: center;
          margin-bottom: 15px;
        }

        .options-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 10px;
          padding: 15px;
          background: #0f1419;
          border: 1px solid #2d3748;
        }

        .option-item {
          display: flex;
          align-items: center;
          gap: 8px;
          color: #718096;
          font-size: 12px;
        }

        .option-checkbox {
          width: 14px;
          height: 14px;
          background: #2d3748;
          border: 1px solid #4a5568;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .option-checkbox.checked::after {
          content: '✓';
          color: #4ade80;
          font-weight: bold;
          font-size: 10px;
        }

        .option-label {
          flex: 1;
        }

        .locked-indicator {
          color: #6b7280;
          font-size: 10px;
        }

        .start-button {
          width: 100%;
          background: #4ade80;
          color: #1a1f2e;
          border: 2px solid #22c55e;
          padding: 15px;
          font-size: 18px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.2s;
          box-shadow: 0 0 20px rgba(74, 222, 128, 0.3);
          letter-spacing: 1px;
        }

        .start-button:hover {
          background: #22c55e;
          box-shadow: 0 0 30px rgba(74, 222, 128, 0.5);
          transform: translateY(-2px);
        }

        .start-button:active {
          transform: translateY(0);
        }
      `}</style>

      <div className="title">Simulation Setup</div>

      <div className="header-row">
        <div className="player-info">Player: Player1</div>
        <div className="records-info">Records: {recordsDisplay}</div>
      </div>

      <div className="sliders-grid">
        {/* Auto Slider */}
        <div className="slider-column">
          <div className="slider-value">{autoMode ? autoValue : 0}</div>
          <div className="slider-container">
            <div className={`slider-track ${autoMode ? 'active' : ''}`}></div>
            <input
              type="range"
              className="slider-input"
              min="0"
              max="30"
              value={autoMode ? autoValue : 0}
              onChange={(e) => handleAutoChange(e.target.value)}
              disabled={!autoMode}
            />
            <div 
              className={`slider-thumb ${!autoMode ? 'disabled-thumb' : ''}`}
              style={{ bottom: `${(autoMode ? autoValue : 0) / 30 * 80}%` }}
            />
          </div>
          <div className="slider-label">Auto</div>
          <div className="auto-toggle">
            <input 
              type="checkbox" 
              id="auto-toggle" 
              className="toggle-checkbox"
              checked={autoMode}
              onChange={(e) => setAutoMode(e.target.checked)}
            />
            <label htmlFor="auto-toggle" className="toggle-label"></label>
          </div>
        </div>

        {/* Regular Sliders */}
        {labels.map((label, index) => (
          <div key={index} className={`slider-column ${autoMode ? 'disabled' : ''}`}>
            <div className="slider-value">{values[index]}</div>
            <div className="slider-container">
              <div className={`slider-track ${!autoMode ? 'active' : ''}`}></div>
              <input
                type="range"
                className="slider-input"
                min="0"
                max="50"
                value={values[index]}
                onChange={(e) => handleSliderChange(index, e.target.value)}
                disabled={autoMode}
              />
              <div 
                className={`slider-thumb ${autoMode ? 'disabled-thumb' : ''}`}
                style={{ bottom: `${values[index] / 50 * 80}%` }}
              />
            </div>
            <div className="slider-label">{label}</div>
          </div>
        ))}

        {/* Disabled Sliders */}
        {disabledLabels.map((label, index) => (
          <div key={`disabled-${index}`} className="slider-column disabled">
            <div className="slider-value">0</div>
            <div className="slider-container">
              <div className="slider-track disabled-track"></div>
              <div className="slider-thumb disabled-thumb" style={{ bottom: '0%' }} />
            </div>
            <div className="slider-label">{label}</div>
          </div>
        ))}
      </div>

      <div className="auto-distribution">
        <div className="checkbox-container">
          <div className={`checkbox ${autoMode ? 'checked' : ''}`}></div>
          <div className="checkbox-label">Auto-distribution</div>
        </div>
      </div>

      <div className="additional-options">
        <div className="options-title">Additional Options</div>
        <div className="options-grid">
          <div className="option-item">
            <div 
              className={`option-checkbox ${customObjects ? 'checked' : ''}`}
              onClick={() => setCustomObjects(!customObjects)}
            ></div>
            <span className="option-label">Custom Objects</span>
            <span className="locked-indicator">(Locked)</span>
          </div>
          <div className="option-item">
            <div 
              className={`option-checkbox ${customFields ? 'checked' : ''}`}
              onClick={() => setCustomFields(!customFields)}
            ></div>
            <span className="option-label">Custom Fields</span>
            <span className="locked-indicator">(Locked)</span>
          </div>
          <div className="option-item">
            <div 
              className={`option-checkbox ${specificOwnership ? 'checked' : ''}`}
              onClick={() => setSpecificOwnership(!specificOwnership)}
            ></div>
            <span className="option-label">Specific Ownership</span>
            <span className="locked-indicator">(Locked)</span>
          </div>
          <div className="option-item">
            <div 
              className={`option-checkbox ${distributionWeights ? 'checked' : ''}`}
              onClick={() => setDistributionWeights(!distributionWeights)}
            ></div>
            <span className="option-label">Distribution Weights</span>
            <span className="locked-indicator">(Locked)</span>
          </div>
        </div>
      </div>

      <button className="start-button">Start Simulation</button>
    </div>
  );
};

export default SimulationSetup;